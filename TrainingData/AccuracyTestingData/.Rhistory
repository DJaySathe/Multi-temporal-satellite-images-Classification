needtoinc <- checkvalidity(result,k)
k = k+1
}
library(ISLR)
default = Default
View(default)
write.csv(default)
write.csv(default,"C:/Users/Sanket Shahane/Desktop/Default.csv")
library(bnlearn)
csvdata<-read.csv('C:/Users/Sanket Shahane/Google Drive/MS/FDS/Homework/HW5/HW45R/bn-data.csv')
head(csvdata)
csvd1 <- csvdata[,-1]
bn.hs <- hc(csvd1)
plot(bn.hs)
fitted <- bn.fit(bn.hs,csvd1)
fitted$Smoking
fitted$Family
fitted$P..Work
fitted$M..Work
fitted$Proteins
fitted$Pressure
library(e1071)
data(HousVotes84)
data(HouseVotes84)
HouseVotes84
library(mlbench)
HouseVote84
data("HouseVotes84")
dataset <- HouseVotes84
fix(dataset)
HouseVotes84?
;;
?HouseVotes84
model <- naiveBayes(Class ~ ., data = HouseVotes84)
predict(model, HouseVotes84[1:10,-1])
predict(model, HouseVotes84[1:10,-1], type = "raw")
table(pred, HouseVotes84$Class)
pred <- predict(model, HouseVotes84[,-1])
table(pred, HouseVotes84$Class)
head(dataset)
head(dataset[,c(1,12)])
head(dataset[,c(1,12)],50)
head(dataset[which(dataset$Class=="republican"),c(1,12)],50)
sum(dataset[which(dataset$Class=="republican"),c(1,12)],50)
length(dataset[which(dataset$Class=="republican"),c(1,12)],50)
length(dataset[which(dataset$Class=="republican"),c(1,12)])
nrow(dataset[which(dataset$Class=="republican"),c(1,12)],50)
nrow(dataset[which(dataset$Class=="republican"),c(1,12)])
nrow(dataset[which(dataset$Class=="republican" && dataset$V11=="y"),c(1,12)])
nrow(dataset[which(dataset$Class=="republican" && dataset$V11=="n"),c(1,12)])
nrow(dataset[which(dataset$Class=="republican" and dataset$V11=="n"),c(1,12)])
nrow(dataset[which(dataset$Class=="republican" & dataset$V11=="n"),c(1,12)])
nrow(dataset[which(dataset$Class=="republican" & dataset$V11=="y"),c(1,12)])
dataset[which(dataset$Class == "republiccan" & is.na(dataset$V11)),c(1,12)]
dataset[which(dataset$Class == "republiccan" & dataset$V11 == N/Q),c(1,12)]
dataset[which(dataset$Class == "republiccan" & dataset$V11 == NA),c(1,12)]
dataset[which(dataset$Class == "republican" & dataset$V11 == NA),c(1,12)]
dataset[which(dataset$Class == "republican" & is.na(dataset$V11)),c(1,12)]
model = naiveBayes(Class~.,data=dataset)
model
predict(model, HouseVotes84[1:10,-1])
table(predict(model, HouseVotes84[1:10,-1]),HouseVotes84$Class)
table(predict(model, HouseVotes84[1:10,-1]),HouseVotes84$Class[1:10])
pred <- predict(model, HouseVotes84[,-1])
table(pred, HouseVotes84$Class)
mean(pred==HouseVotes84$Class)
?sample()
set.seed(100)
sample(dataset,)
0.8*nrow(dataset)
training<-sample(dataset,0.8*nrow(dataset))
training<-sample(dataset,0.2*nrow(dataset))
training<-sample(dataset[,],0.2*nrow(dataset))
sample(dataset, size=0.8*nrow(dataset), replace = FALSE, prob = NULL)
trainingdata<-dataset[sample(nrow(dataset), size=0.8*nrow(dataset), replace = FALSE, prob = NULL)]
trainingdata<-dataset[sample(nrow(dataset), size=0.8*nrow(dataset), replace = FALSE, prob = NULL),]
testdata = dataset[-trainingdata,]
testdata = dataset[,] - trainingdata[,]
sample(dataset, size=0.8*nrow(dataset), replace = FALSE, prob = NULL)
arr <- sample(nrow(dataset), size=0.8*nrow(dataset), replace = FALSE, prob = NULL)
arr
trainingdata <- dataset[arr,]
testdata <- dataset[-arr,]
model <- naiveBayes(Class~.,trainingdata)
pred <- predict(model,testdata[,-1])
pred
table(pred,testdata$Class)
mean(pred==testdata$Class)
model.logistic <- glm(Class~.,family=binomial(link='logit'),data=trainingdata)
summary(model.logistic)
model.logistic <- glm(Class~.,family=binomial(link='logit'),data=trainingdata,control = list(maxit=50))
summary(model.logistic)
pred.training <- predict(model.logistic,trainingdata[,-1])
mean(pred.training,trainingdata$Class)
mean(pred.training,na.omit(trainingdata$Class)
)
mean(pred.training==trainingdata$Class)
mean(pred.training==na.omit(trainingdata$Class))
is.na(pred.training)
pred.training
na.omit(pred.training)
mean(na.omit(pred.training)==na.omit(trainingdata$Class))
dataset.logistic <- na.omit(dataset)
nrow(dataset.logistic)
nrow(dataset)
arr.logistic <- sample(nrow(dataset.logistic),0.8*nrow(dataset.logistic),replace = FALSE)
trainingdata.logistic = dataset.logistic[arr.logistic,]
testdata.logistic = dataset.logistic[-arr.logistic,]
model.logistic <- glm(Class~.,family=binomial(link='logit'),data=trainingdata.logistic,control = list(maxit=50))
pred.training(model.logistic,trainingdata.logistic[,-1])
pred.training <- predict(model.logistic,trainingdata.logistic[,-1])
mean(pred.training,trainingdata.logistic$Class)
mean(pred.training==trainingdata.logistic$Class)
pred.training
pred.training <- predict(model.logistic,trainingdata.logistic[,-1],type = 'response')
predict()
pred.training
pred.training <- ifelse(pred.training > 0.5,1,0)
pred.training
pred.training <- ifelse(pred.training > 0.5,'y','n')
pred.training
mean(pred.training==trainingdata.logistic$Class)
trainingdata.logistic$Class
pred.training <- ifelse(pred.training > 0.5,'democrat','republican')
mean(pred.training==trainingdata.logistic$Class)
pred.training <- predict(model.logistic,trainingdata.logistic[,-1],type = 'response')
pred.training
pred.training <- ifelse(pred.training > 0.5,'democrat','republican')
mean(pred.training==trainingdata.logistic$Class)
pred.training
pred.training <- predict(model.logistic,trainingdata.logistic[,-1],type = 'response')
pred.training <- ifelse(pred.training > 0.5,"republican","democrat")
mean(pred.training==trainingdata.logistic$Class)
fix(pred.training)
pred.training<-data.frame(pred.training)
fix(pred.training)
fix(trainingdata.logistic$Class)
fix(trainingdata.logistic)
pred.training
trainingdata.logistic$Class
pred.training$pred.training
pred.training$pred.training==trainingdata.logistic$Class
q()
# Code for saving the classifier on each image after validation.
library(e1071)
dataset = read.csv("ValidationData-2015-12-31.csv") #open the image data
dataset = dataset[,-c(1,2,3)]
# shuffle dataset for cross-validation
shuffleVec = sample(nrow(dataset),nrow(dataset))
dataset = dataset[shuffleVec,]
crossvalidationError = 0
k=10
for(i in seq(0,k-1,1)){
testVector = seq(1,nrow(dataset)%/%k)
testVector = testVector + nrow(dataset)%/%k*i
testData = dataset[testVector,]
trainData = dataset[-testVector,]
temp.model = naiveBayes(as.factor(trainData$Class)~.,data=trainData)
temp.predictions = predict(temp.model,testData[,-1])
tmp.err = sum(temp.predictions!=testData[,1])/nrow(testData)
print(table(predict(temp.model,testData[,-1]),testData[,1]))
print(tmp.err)
crossvalidationError = crossvalidationError+tmp.err
}
crossvalidationError = crossvalidationError/k
model = naiveBayes(as.factor(dataset$Class)~.,data=dataset)
#save the model and the error results rename the file according to the image
image2.MLCmodel = list(model,crossvalidationError)
save(image2.MLCmodel,file = "image2.MLCmodel.rda")
setwd("C:/Users/Sanket Shahane/Google Drive/MS/ALDA/Project/Multi-Temporal-Classification/TrainingData/ValidationData")
dataset1=read.csv("ValidationData-2015-04-19.csv")
dataset2=read.csv("ValidationData-2015-12-31.csv")
dataset3=read.csv("ValidationData-2016-01-16.csv")
dataset4=read.csv("ValidationData-2016-03-20.csv")
dataset1 = dataset1[,-c(1,2,3)]
dataset2 = dataset2[,-c(1,2,3)]
dataset3 = dataset3[,-c(1,2,3)]
dataset4 = dataset4[,-c(1,2,3)]
setwd("C:/Users/Sanket Shahane/Google Drive/MS/ALDA/Project/Multi-Temporal-Classification/Rscripts")
#load("image1.BMAmodel.rda")
#load("image2.BMAmodel.rda")
#load("image3.BMAmodel.rda")
#load("image4.BMAmodel.rda")
load("image1.BMAmodel.LogWeighted.rda")
load("image2.BMAmodel.LogWeighted.rda")
load("image3.BMAmodel.LogWeighted.rda")
load("image4.BMAmodel.LogWeighted.rda")
print(image1.BMAmodel.LogWeighted[[3]])
print(image2.BMAmodel.LogWeighted[[3]])
print(image3.BMAmodel.LogWeighted[[3]])
print(image4.BMAmodel.LogWeighted[[3]])
print(image4.BMAmodel.LogWeighted[[2]])
1 - print(image4.BMAmodel.LogWeighted[[2]])
1 - print(image4.BMAmodel.LogWeighted[[2]])
1 - print(image1.BMAmodel.LogWeighted[[2]])
1 - print(image2.BMAmodel.LogWeighted[[2]])
1 - print(image3.BMAmodel.LogWeighted[[2]])
1 - print(image4.BMAmodel.LogWeighted[[2]])
w1=image1.BMAmodel.LogWeighted[[3]]*-1
w2=image2.BMAmodel.LogWeighted[[3]]*-1
w3=image3.BMAmodel.LogWeighted[[3]]*-1
w4=image4.BMAmodel.LogWeighted[[3]]*-1
s = w1+w2+w3+w4
w1 = w1/s
w2 = w2/s
w3=w3/s
w4=w4/s
w1
w2
w3
w4
w1+w2+w3+w4
w1=image1.BMAmodel.LogWeighted[[3]]*-1
w2=image2.BMAmodel.LogWeighted[[3]]*-1
w3=image3.BMAmodel.LogWeighted[[3]]*-1
w4=image4.BMAmodel.LogWeighted[[3]]*-1
s = w1+w2+w3+w4
w1 = 1 - (w1/s)
w2 = 1 - (w2/s)
w3 = 1 - (w3/s)
w4 = 1 - (w4/s)
w1
w2
w3
w4
w1=image1.BMAmodel.LogWeighted[[3]]*-1
w2=image2.BMAmodel.LogWeighted[[3]]*-1
w3=image3.BMAmodel.LogWeighted[[3]]*-1
w4=image4.BMAmodel.LogWeighted[[3]]*-1
w1
w2
w3
w4
w5
1 - image2.BMAmodel.LogWeighted[[2]]
w2
w1=image1.BMAmodel.LogWeighted[[3]]*-1
w2=image2.BMAmodel.LogWeighted[[3]]*-1
w3=image3.BMAmodel.LogWeighted[[3]]*-1
w4=image4.BMAmodel.LogWeighted[[3]]*-1
s = w1+w2+w3+w4
w1 = w1/s
w2 = w2/s
w3 = w3/s
w4 = w4/s
w1 = 1 - w1
w2 = 1 - w2
w3 = 1 - w3
w4 = 1 - w4
w1
w2
w3
w4
s = w1+w2+w3+w4
w1 = w1/s
w2 = w2/s
w3 = w3/s
w4 = w4/s
w1
w2
w3
w4
s
w1+w2+w3+w4
w1=image1.BMAmodel.LogWeighted[[3]]*-1
w2=image2.BMAmodel.LogWeighted[[3]]*-1
w3=image3.BMAmodel.LogWeighted[[3]]*-1
w4=image4.BMAmodel.LogWeighted[[3]]*-1
s = w1+w2+w3+w4
w1 = w1/s
w2 = w2/s
w3 = w3/s
w4 = w4/s
w1
w2
w3
w4
w1 = 1 - w1
w2 = 1 - w2
w3 = 1 - w3
w4 = 1 - w4
w1
w2
w3
w4
setwd("C:/Users/Sanket Shahane/Google Drive/MS/ALDA/Project/Multi-Temporal-Classification/TrainingData/ValidationData")
dataset1=read.csv("ValidationData-2015-04-19.csv")
dataset2=read.csv("ValidationData-2015-12-31.csv")
dataset3=read.csv("ValidationData-2016-01-16.csv")
dataset4=read.csv("ValidationData-2016-03-20.csv")
dataset1 = dataset1[,-c(1,2,3)]
dataset2 = dataset2[,-c(1,2,3)]
dataset3 = dataset3[,-c(1,2,3)]
dataset4 = dataset4[,-c(1,2,3)]
setwd("C:/Users/Sanket Shahane/Google Drive/MS/ALDA/Project/Multi-Temporal-Classification/Rscripts")
#load("image1.BMAmodel.rda")
#load("image2.BMAmodel.rda")
#load("image3.BMAmodel.rda")
#load("image4.BMAmodel.rda")
load("image1.BMAmodel.LogWeighted.rda")
load("image2.BMAmodel.LogWeighted.rda")
load("image3.BMAmodel.LogWeighted.rda")
load("image4.BMAmodel.LogWeighted.rda")
bmaPrediction <- function(sample,i){
if(nrow(sample)!=4){
print("error in input")
return(NULL)
}
#p1 = data.frame(predict(image1.BMAmodel[[1]],sample[1,-1],type="raw"))*image1.BMAmodel[[3]]
#p2 = data.frame(predict(image2.BMAmodel[[1]],sample[2,-1],type="raw"))*image2.BMAmodel[[3]]
#p3 = data.frame(predict(image3.BMAmodel[[1]],sample[3,-1],type="raw"))*image3.BMAmodel[[3]]
#p4 = data.frame(predict(image4.BMAmodel[[1]],sample[4,-1],type="raw"))*image4.BMAmodel[[3]]
w1=image1.BMAmodel.LogWeighted[[3]]*-1
w2=image2.BMAmodel.LogWeighted[[3]]*-1
w3=image3.BMAmodel.LogWeighted[[3]]*-1
w4=image4.BMAmodel.LogWeighted[[3]]*-1
s = w1+w2+w3+w4
w1 = w1/s
w2 = w2/s
w3 = w3/s
w4 = w4/s
w1 = 1 - w1
w2 = 1 - w2
w3 = 1 - w3
w4 = 1 - w4
#p1 = data.frame(predict(image1.BMAmodel.LogWeighted[[1]],sample[1,-1],type="raw"))*image1.BMAmodel.LogWeighted[[3]]*-1
#p2 = data.frame(predict(image2.BMAmodel.LogWeighted[[1]],sample[2,-1],type="raw"))*image2.BMAmodel.LogWeighted[[3]]*-1
#p3 = data.frame(predict(image3.BMAmodel.LogWeighted[[1]],sample[3,-1],type="raw"))*image3.BMAmodel.LogWeighted[[3]]*-1
#p4 = data.frame(predict(image4.BMAmodel.LogWeighted[[1]],sample[4,-1],type="raw"))*image4.BMAmodel.LogWeighted[[3]]*-1
p1 = data.frame(predict(image1.BMAmodel.LogWeighted[[1]],sample[1,-1],type="raw"))*w1
p2 = data.frame(predict(image2.BMAmodel.LogWeighted[[1]],sample[2,-1],type="raw"))*w2
p3 = data.frame(predict(image3.BMAmodel.LogWeighted[[1]],sample[3,-1],type="raw"))*w3
p4 = data.frame(predict(image4.BMAmodel.LogWeighted[[1]],sample[4,-1],type="raw"))*w4
currProbabilities = rbind(p1,p2,p3,p4)
currProbabilities = apply(currProbabilities,2,mean)
#print(currProbabilities)
class = as.integer(which.max(currProbabilities))
#print(class)
# write this class to a data frame
return(class)
}
outputDataFrame = dataset1[1:10,]
outputDataFrame = cbind(outputDataFrame,data.frame(NaN))
for (i in seq(1,nrow(outputDataFrame),1)) {
sample = rbind(dataset1[i,],dataset2[i,],dataset3[i,],dataset4[i,])
class = bmaPrediction(sample,i)
outputDataFrame[i,10] = class
}
?predict()
bmaPrediction <- function(sample,i){
if(nrow(sample)!=4){
print("error in input")
return(NULL)
}
#p1 = data.frame(predict(image1.BMAmodel[[1]],sample[1,-1],type="raw"))*image1.BMAmodel[[3]]
#p2 = data.frame(predict(image2.BMAmodel[[1]],sample[2,-1],type="raw"))*image2.BMAmodel[[3]]
#p3 = data.frame(predict(image3.BMAmodel[[1]],sample[3,-1],type="raw"))*image3.BMAmodel[[3]]
#p4 = data.frame(predict(image4.BMAmodel[[1]],sample[4,-1],type="raw"))*image4.BMAmodel[[3]]
w1=image1.BMAmodel.LogWeighted[[3]]*-1
w2=image2.BMAmodel.LogWeighted[[3]]*-1
w3=image3.BMAmodel.LogWeighted[[3]]*-1
w4=image4.BMAmodel.LogWeighted[[3]]*-1
s = w1+w2+w3+w4
w1 = w1/s
w2 = w2/s
w3 = w3/s
w4 = w4/s
w1 = 1 - w1
w2 = 1 - w2
w3 = 1 - w3
w4 = 1 - w4
#p1 = data.frame(predict(image1.BMAmodel.LogWeighted[[1]],sample[1,-1],type="raw"))*image1.BMAmodel.LogWeighted[[3]]*-1
#p2 = data.frame(predict(image2.BMAmodel.LogWeighted[[1]],sample[2,-1],type="raw"))*image2.BMAmodel.LogWeighted[[3]]*-1
#p3 = data.frame(predict(image3.BMAmodel.LogWeighted[[1]],sample[3,-1],type="raw"))*image3.BMAmodel.LogWeighted[[3]]*-1
#p4 = data.frame(predict(image4.BMAmodel.LogWeighted[[1]],sample[4,-1],type="raw"))*image4.BMAmodel.LogWeighted[[3]]*-1
p1 = data.frame(predict(image1.BMAmodel.LogWeighted[[1]],sample[1,-1],type="raw"))
p2 = data.frame(predict(image2.BMAmodel.LogWeighted[[1]],sample[2,-1],type="raw"))
p3 = data.frame(predict(image3.BMAmodel.LogWeighted[[1]],sample[3,-1],type="raw"))
p4 = data.frame(predict(image4.BMAmodel.LogWeighted[[1]],sample[4,-1],type="raw"))
currProbabilities = rbind(p1,p2,p3,p4)
currProbabilities = apply(currProbabilities,2,mean)
#print(currProbabilities)
class = as.integer(which.max(currProbabilities))
#print(class)
# write this class to a data frame
return(class)
}
outputDataFrame = dataset1[1:10,]
outputDataFrame = cbind(outputDataFrame,data.frame(NaN))
for (i in seq(1,nrow(outputDataFrame),1)) {
sample = rbind(dataset1[i,],dataset2[i,],dataset3[i,],dataset4[i,])
class = bmaPrediction(sample,i)
outputDataFrame[i,10] = class
}
setwd("C:/Users/Sanket Shahane/Google Drive/MS/ALDA/Project/Multi-Temporal-Classification/TrainingData/ValidationData")
dataset1=read.csv("ValidationData-2015-04-19.csv")
dataset2=read.csv("ValidationData-2015-12-31.csv")
dataset3=read.csv("ValidationData-2016-01-16.csv")
dataset4=read.csv("ValidationData-2016-03-20.csv")
dataset1 = dataset1[,-c(1,2,3)]
dataset2 = dataset2[,-c(1,2,3)]
dataset3 = dataset3[,-c(1,2,3)]
dataset4 = dataset4[,-c(1,2,3)]
setwd("C:/Users/Sanket Shahane/Google Drive/MS/ALDA/Project/Multi-Temporal-Classification/Rscripts")
#load("image1.BMAmodel.rda")
#load("image2.BMAmodel.rda")
#load("image3.BMAmodel.rda")
#load("image4.BMAmodel.rda")
load("image1.BMAmodel.LogWeighted.rda")
load("image2.BMAmodel.LogWeighted.rda")
load("image3.BMAmodel.LogWeighted.rda")
load("image4.BMAmodel.LogWeighted.rda")
bmaPrediction <- function(sample,i){
if(nrow(sample)!=4){
print("error in input")
return(NULL)
}
#p1 = data.frame(predict(image1.BMAmodel[[1]],sample[1,-1],type="raw"))*image1.BMAmodel[[3]]
#p2 = data.frame(predict(image2.BMAmodel[[1]],sample[2,-1],type="raw"))*image2.BMAmodel[[3]]
#p3 = data.frame(predict(image3.BMAmodel[[1]],sample[3,-1],type="raw"))*image3.BMAmodel[[3]]
#p4 = data.frame(predict(image4.BMAmodel[[1]],sample[4,-1],type="raw"))*image4.BMAmodel[[3]]
p1 = data.frame(predict(image1.BMAmodel.LogWeighted[[1]],sample[1,-1],type="raw"))*image1.BMAmodel.LogWeighted[[3]]*-1
p2 = data.frame(predict(image2.BMAmodel.LogWeighted[[1]],sample[2,-1],type="raw"))*image2.BMAmodel.LogWeighted[[3]]*-1
p3 = data.frame(predict(image3.BMAmodel.LogWeighted[[1]],sample[3,-1],type="raw"))*image3.BMAmodel.LogWeighted[[3]]*-1
p4 = data.frame(predict(image4.BMAmodel.LogWeighted[[1]],sample[4,-1],type="raw"))*image4.BMAmodel.LogWeighted[[3]]*-1
currProbabilities = rbind(p1,p2,p3,p4)
currProbabilities = apply(currProbabilities,2,mean)
#print(currProbabilities)
class = as.integer(which.max(currProbabilities))
#print(class)
# write this class to a data frame
return(class)
}
outputDataFrame = dataset1[1:10,]
outputDataFrame = cbind(outputDataFrame,data.frame(NaN))
for (i in seq(1,nrow(outputDataFrame),1)) {
sample = rbind(dataset1[i,],dataset2[i,],dataset3[i,],dataset4[i,])
class = bmaPrediction(sample,i)
outputDataFrame[i,10] = class
}
outputDataFrame = dataset1
outputDataFrame = cbind(outputDataFrame,data.frame(NaN))
for (i in seq(1,nrow(outputDataFrame),1)) {
sample = rbind(dataset1[i,],dataset2[i,],dataset3[i,],dataset4[i,])
class = bmaPrediction(sample,i)
outputDataFrame[i,10] = class
}
predict(image1.BMAmodel.LogWeighted[[1]],dataset1[,-1])
predict(dataset1[,-1],image1.BMAmodel.LogWeighted[[1]])
setwd("C:/Users/Sanket Shahane/Google Drive/MS/ALDA/Project/Multi-Temporal-Classification/TrainingData/ValidationData")
dataset1=read.csv("ValidationData-2015-04-19.csv")
dataset2=read.csv("ValidationData-2015-12-31.csv")
dataset3=read.csv("ValidationData-2016-01-16.csv")
dataset4=read.csv("ValidationData-2016-03-20.csv")
dataset1 = dataset1[,-c(1,2,3)]
dataset2 = dataset2[,-c(1,2,3)]
dataset3 = dataset3[,-c(1,2,3)]
dataset4 = dataset4[,-c(1,2,3)]
setwd("C:/Users/Sanket Shahane/Google Drive/MS/ALDA/Project/Multi-Temporal-Classification/Rscripts")
#load("image1.BMAmodel.rda")
#load("image2.BMAmodel.rda")
#load("image3.BMAmodel.rda")
#load("image4.BMAmodel.rda")
load("image1.BMAmodel.LogWeighted.rda")
load("image2.BMAmodel.LogWeighted.rda")
load("image3.BMAmodel.LogWeighted.rda")
load("image4.BMAmodel.LogWeighted.rda")
bmaPrediction <- function(sample,i){
if(nrow(sample)!=4){
print("error in input")
return(NULL)
}
#p1 = data.frame(predict(image1.BMAmodel[[1]],sample[1,-1],type="raw"))*image1.BMAmodel[[3]]
#p2 = data.frame(predict(image2.BMAmodel[[1]],sample[2,-1],type="raw"))*image2.BMAmodel[[3]]
#p3 = data.frame(predict(image3.BMAmodel[[1]],sample[3,-1],type="raw"))*image3.BMAmodel[[3]]
#p4 = data.frame(predict(image4.BMAmodel[[1]],sample[4,-1],type="raw"))*image4.BMAmodel[[3]]
p1 = data.frame(predict(image1.BMAmodel.LogWeighted[[1]],sample[1,-1],type="raw"))*image1.BMAmodel.LogWeighted[[3]]*-1
p2 = data.frame(predict(image2.BMAmodel.LogWeighted[[1]],sample[2,-1],type="raw"))*image2.BMAmodel.LogWeighted[[3]]*-1
p3 = data.frame(predict(image3.BMAmodel.LogWeighted[[1]],sample[3,-1],type="raw"))*image3.BMAmodel.LogWeighted[[3]]*-1
p4 = data.frame(predict(image4.BMAmodel.LogWeighted[[1]],sample[4,-1],type="raw"))*image4.BMAmodel.LogWeighted[[3]]*-1
currProbabilities = rbind(p1,p2,p3,p4)
currProbabilities = apply(currProbabilities,2,mean)
#print(currProbabilities)
class = as.integer(which.max(currProbabilities))
#print(class)
# write this class to a data frame
return(class)
}
outputDataFrame = dataset1
outputDataFrame = cbind(outputDataFrame,data.frame(NaN))
for (i in seq(1,nrow(outputDataFrame),1)) {
sample = rbind(dataset1[i,],dataset2[i,],dataset3[i,],dataset4[i,])
class = bmaPrediction(sample,i)
outputDataFrame[i,10] = class
}
sum(outputDataFrame[,1]==outputDataFrame[,10])/nrow(outputDataFrame)
load("image1.MLCmodel.rda")
load("image2.MLCmodel.rda")
load("image3.MLCmodel.rda")
load("image4.MLCmodel.rda")
setwd("C:/Users/Sanket Shahane/Google Drive/MS/ALDA/Project/Multi-Temporal-Classification/TrainingData/AccuracyTestingData")
setwd("C:/Users/Sanket Shahane/Google Drive/MS/ALDA/Project/Multi-Temporal-Classification/Rscripts")
load("image1.MLCmodel.rda")
load("image2.MLCmodel.rda")
load("image3.MLCmodel.rda")
load("image4.MLCmodel.rda")
setwd("C:/Users/Sanket Shahane/Google Drive/MS/ALDA/Project/Multi-Temporal-Classification/TrainingData/AccuracyTestingData")
dataset = read.csv("AccuracyData-2016-03-20.csv")
dataset = dataset[,-c(1,2,3)]
head(dataset)
current.model = image4.MLCmodel[[1]]
table(predict(current.model,dataset[,-1]),dataset[,1])
