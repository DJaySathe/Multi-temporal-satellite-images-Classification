predict <- function(bandsWithClass, tData){
prediction = c()
# seperate out data based on class assignment
class1Data = bandsWithClass[bandsWithClass$Class == 1,][,-1]
class2Data = bandsWithClass[bandsWithClass$Class == 2,][,-1]
class3Data = bandsWithClass[bandsWithClass$Class == 3,][,-1]
class4Data = bandsWithClass[bandsWithClass$Class == 4,][,-1]
for (i in c(1:nrow(tData))){
# campute all class probabilities
class1Prob = calculateProb(class1Data, tData[i,])
print(class1Prob)
class2Prob = calculateProb(class2Data, tData[i,])
print(class2Prob)
class3Prob = calculateProb(class3Data, tData[i,])
print(class3Prob)
class4Prob = calculateProb(class4Data, tData[i,])
print("###class 4###")
print(class4Prob)
finalClass = 1;
finalProb = class1Prob
if(class2Prob > finalProb){
finalClass = 2
finalProb = class2Prob
}
if(class3Prob > finalProb){
finalClass = 3
finalProb = class3Prob
}
if(class4Prob > finalProb){
finalClass = 4
finalProb = class4Prob
}
prediction = c(prediction, finalClass)
}
return(prediction)
}
library(MASS)
# set work directory as the location of the script
dataset = read.csv("../../TrainingData/ValidationData/ValidationData-2015-04-19.csv")
# create a test vector after shuffling the data
shuffleVec = sample(nrow(dataset),nrow(dataset))
testVector = sample(nrow(dataset),nrow(dataset)*0.2)
testData = dataset[testVector,]
# create traindata by eliminating the test data
trainData = dataset[-testVector,]
# delete first 4 columns and get only band values in bands variable
bandsWithClass = trainData[-c(1,2,3)]
# get predicted class list for test data
prediction = predict(bandsWithClass, testData[-c(1,2,3,4)])
# append this prediction to existing test data
testData[["Prediction"]] <- prediction
bands = bandsWithClass[-1]
# create a map for parameters of individual bands
#list = c()
# iterate over each band and store the respective parameters in the map
#for(i in names(bands))
#  params = c(mean(bands$i), sd(bands$i))
#  list$i = params
calculateProb <- function(classData, dataPoint){
# create covariance matrix of data
covariance = cov(classData)
# compute means of all the columns
mean = colMeans(classData)
# calculate probability
prob = (exp(-(as.matrix(dataPoint-mean))%*%solve(covariance)%*%(t(dataPoint-mean))))/sqrt(det(covariance))
print(prob)
return(prob)
}
predict <- function(bandsWithClass, tData){
prediction = c()
# seperate out data based on class assignment
class1Data = bandsWithClass[bandsWithClass$Class == 1,][,-1]
class2Data = bandsWithClass[bandsWithClass$Class == 2,][,-1]
class3Data = bandsWithClass[bandsWithClass$Class == 3,][,-1]
class4Data = bandsWithClass[bandsWithClass$Class == 4,][,-1]
for (i in c(1:nrow(tData))){
# campute all class probabilities
class1Prob = calculateProb(class1Data, tData[i,])
print(class1Prob)
class2Prob = calculateProb(class2Data, tData[i,])
print(class2Prob)
class3Prob = calculateProb(class3Data, tData[i,])
print(class3Prob)
class4Prob = calculateProb(class4Data, tData[i,])
print("###class 4###")
print(class4Prob)
finalClass = 1;
finalProb = class1Prob
if(class2Prob > finalProb){
finalClass = 2
finalProb = class2Prob
}
if(class3Prob > finalProb){
finalClass = 3
finalProb = class3Prob
}
if(class4Prob > finalProb){
finalClass = 4
finalProb = class4Prob
}
prediction = c(prediction, finalClass)
}
return(prediction)
}
library(MASS)
# set work directory as the location of the script
dataset = read.csv("../../TrainingData/ValidationData/ValidationData-2015-04-19.csv")
# create a test vector after shuffling the data
shuffleVec = sample(nrow(dataset),nrow(dataset))
testVector = sample(nrow(dataset),nrow(dataset)*0.2)
testData = dataset[testVector,]
# create traindata by eliminating the test data
trainData = dataset[-testVector,]
# delete first 4 columns and get only band values in bands variable
bandsWithClass = trainData[-c(1,2,3)]
# get predicted class list for test data
prediction = predict(bandsWithClass, testData[-c(1,2,3,4)])
# append this prediction to existing test data
testData[["Prediction"]] <- prediction
bands = bandsWithClass[-1]
# create a map for parameters of individual bands
#list = c()
# iterate over each band and store the respective parameters in the map
#for(i in names(bands))
#  params = c(mean(bands$i), sd(bands$i))
#  list$i = params
View(testData)
prediction
testData$Class
sum(testData$Class != prediction)
table(trainData$Class)
43+42+33+29
table(trainData$Class)/147
calculateProb <- function(classData, dataPoint){
# create covariance matrix of data
covariance = cov(classData)
# compute means of all the columns
mean = colMeans(classData)
# calculate probability
prob = (exp(-(as.matrix(dataPoint-mean))%*%solve(covariance)%*%(t(dataPoint-mean))))/sqrt(det(covariance))
print(prob)
return(prob)
}
predict <- function(bandsWithClass, tData){
prediction = c()
# seperate out data based on class assignment
class1Data = bandsWithClass[bandsWithClass$Class == 1,][,-1]
class1Prob = nrow(class1Data)/nrow(bandsWithClass)
class2Data = bandsWithClass[bandsWithClass$Class == 2,][,-1]
class2Prob = nrow(class2Data)/nrow(bandsWithClass)
class3Data = bandsWithClass[bandsWithClass$Class == 3,][,-1]
class3Prob = nrow(class3Data)/nrow(bandsWithClass)
class4Data = bandsWithClass[bandsWithClass$Class == 4,][,-1]
class4Prob = nrow(class4Data)/nrow(bandsWithClass)
for (i in c(1:nrow(tData))){
# campute all class probabilities
class1Prob = calculateProb(class1Data, tData[i,])
print(class1Prob)
class2Prob = calculateProb(class2Data, tData[i,])
print(class2Prob)
class3Prob = calculateProb(class3Data, tData[i,])
print(class3Prob)
class4Prob = calculateProb(class4Data, tData[i,])
print("###class 4###")
print(class4Prob)
finalClass = 1;
finalProb = class1Prob
if(class2Prob > finalProb){
finalClass = 2
finalProb = class2Prob
}
if(class3Prob > finalProb){
finalClass = 3
finalProb = class3Prob
}
if(class4Prob > finalProb){
finalClass = 4
finalProb = class4Prob
}
prediction = c(prediction, finalClass)
}
return(prediction)
}
library(MASS)
# set work directory as the location of the script
dataset = read.csv("../../TrainingData/ValidationData/ValidationData-2015-04-19.csv")
# create a test vector after shuffling the data
shuffleVec = sample(nrow(dataset),nrow(dataset))
testVector = sample(nrow(dataset),nrow(dataset)*0.2)
testData = dataset[testVector,]
# create traindata by eliminating the test data
trainData = dataset[-testVector,]
# delete first 4 columns and get only band values in bands variable
bandsWithClass = trainData[-c(1,2,3)]
# get predicted class list for test data
prediction = predict(bandsWithClass, testData[-c(1,2,3,4)])
# append this prediction to existing test data
testData[["Prediction"]] <- prediction
bands = bandsWithClass[-1]
# create a map for parameters of individual bands
#list = c()
# iterate over each band and store the respective parameters in the map
#for(i in names(bands))
#  params = c(mean(bands$i), sd(bands$i))
#  list$i = params
prediction
sum(testData$Class != prediction)
nrow(prediction)
dim(prediction)
length(prediction)
setwd("C:/Users/Sanket Shahane/Google Drive/MS/ALDA/Project/Multi-temporal-Classification-of-satellite-images/Rscripts")
dataset = read.csv("../../TrainingData/Corrected Data/ValidationData-2015-04-19.csv")
dataset = read.csv("../TrainingData/Corrected Data/ValidationData-2015-04-19.csv")
dataset = dataset[,-c(1,2,3)]
head(dataset)
head(dataset[,-1])
calculateProb <- function(classData, dataPoint, classPriori){
# create covariance matrix of data
covariance = cov(classData)
# compute means of all the columns
mean = colMeans(classData)
# calculate probability
prob = (exp(-(as.matrix(dataPoint-mean))%*%solve(covariance)%*%(t(dataPoint-mean))))*classPriori/sqrt(det(covariance))
return(prob)
}
predict <- function(bandsWithClass, tData){
prediction = c()
# seperate out data based on class assignment
class1Data = bandsWithClass[bandsWithClass$Class == 1,][,-1]
class1Priori = nrow(class1Data)/nrow(bandsWithClass)
class2Data = bandsWithClass[bandsWithClass$Class == 2,][,-1]
class2Priori = nrow(class2Data)/nrow(bandsWithClass)
class3Data = bandsWithClass[bandsWithClass$Class == 3,][,-1]
class3Priori = nrow(class3Data)/nrow(bandsWithClass)
class4Data = bandsWithClass[bandsWithClass$Class == 4,][,-1]
class4Priori = nrow(class4Data)/nrow(bandsWithClass)
for (i in c(1:nrow(tData))){
# campute all class probabilities
class1Prob = calculateProb(class1Data, tData[i,], class1Priori)
print(class1Prob)
class2Prob = calculateProb(class2Data, tData[i,], class2Priori)
print(class2Prob)
class3Prob = calculateProb(class3Data, tData[i,], class3Priori)
print(class3Prob)
class4Prob = calculateProb(class4Data, tData[i,], class4Priori)
print("###class 4###")
print(class4Prob)
finalClass = 1;
finalProb = class1Prob
if(class2Prob > finalProb){
finalClass = 2
finalProb = class2Prob
}
if(class3Prob > finalProb){
finalClass = 3
finalProb = class3Prob
}
if(class4Prob > finalProb){
finalClass = 4
finalProb = class4Prob
}
prediction = c(prediction, finalClass)
}
return(prediction)
}
library(MASS)
# set work directory as the location of the script
setwd("C:/Users/Sanket Shahane/Google Drive/MS/ALDA/Project/Multi-temporal-Classification-of-satellite-images/Rscripts")
dataset = read.csv("../TrainingData/Corrected Data/ValidationData-2015-04-19.csv")
dataset = dataset[,-c(1,2,3)]
# shuffle dataset for cross-validation
shuffleVec = sample(nrow(dataset),nrow(dataset))
dataset = dataset[shuffleVec,]
crossvalidationError = 0
k=10
for(i in seq(0,k-1,1)){
testVector = seq(1,nrow(dataset)%/%k)
testVector = testVector + nrow(dataset)%/%k*i
testData = dataset[testVector,]
trainData = dataset[-testVector,]
prediction = predict(bandsWithClass, testData[,-1])
temp.err = (sum(prediction != testData$Class)/nrow(testData))
#temp.model = naiveBayes(as.factor(trainData$Class)~.,data=trainData)
#temp.predictions = predict(temp.model,testData[,-1])
#tmp.err = sum(temp.predictions!=testData[,1])/nrow(testData)
#print(table(predict(temp.model,testData[,-1]),testData[,1]))
print(tmp.err)
crossvalidationError = crossvalidationError+tmp.err
}
print(crossvalidationError)
calculateProb <- function(classData, dataPoint, classPriori){
# create covariance matrix of data
covariance = cov(classData)
# compute means of all the columns
mean = colMeans(classData)
# calculate probability
prob = (exp(-(as.matrix(dataPoint-mean))%*%solve(covariance)%*%(t(dataPoint-mean))))*classPriori/sqrt(det(covariance))
return(prob)
}
predict <- function(bandsWithClass, tData){
prediction = c()
# seperate out data based on class assignment
class1Data = bandsWithClass[bandsWithClass$Class == 1,][,-1]
class1Priori = nrow(class1Data)/nrow(bandsWithClass)
class2Data = bandsWithClass[bandsWithClass$Class == 2,][,-1]
class2Priori = nrow(class2Data)/nrow(bandsWithClass)
class3Data = bandsWithClass[bandsWithClass$Class == 3,][,-1]
class3Priori = nrow(class3Data)/nrow(bandsWithClass)
class4Data = bandsWithClass[bandsWithClass$Class == 4,][,-1]
class4Priori = nrow(class4Data)/nrow(bandsWithClass)
for (i in c(1:nrow(tData))){
# campute all class probabilities
class1Prob = calculateProb(class1Data, tData[i,], class1Priori)
print(class1Prob)
class2Prob = calculateProb(class2Data, tData[i,], class2Priori)
print(class2Prob)
class3Prob = calculateProb(class3Data, tData[i,], class3Priori)
print(class3Prob)
class4Prob = calculateProb(class4Data, tData[i,], class4Priori)
print("###class 4###")
print(class4Prob)
finalClass = 1;
finalProb = class1Prob
if(class2Prob > finalProb){
finalClass = 2
finalProb = class2Prob
}
if(class3Prob > finalProb){
finalClass = 3
finalProb = class3Prob
}
if(class4Prob > finalProb){
finalClass = 4
finalProb = class4Prob
}
prediction = c(prediction, finalClass)
}
return(prediction)
}
library(MASS)
# set work directory as the location of the script
setwd("C:/Users/Sanket Shahane/Google Drive/MS/ALDA/Project/Multi-temporal-Classification-of-satellite-images/Rscripts")
dataset = read.csv("../TrainingData/Corrected Data/ValidationData-2015-04-19.csv")
dataset = dataset[,-c(1,2,3)]
# shuffle dataset for cross-validation
shuffleVec = sample(nrow(dataset),nrow(dataset))
dataset = dataset[shuffleVec,]
crossvalidationError = 0
k=10
for(i in seq(0,k-1,1)){
testVector = seq(1,nrow(dataset)%/%k)
testVector = testVector + nrow(dataset)%/%k*i
testData = dataset[testVector,]
trainData = dataset[-testVector,]
prediction = predict(trainData, testData[,-1])
temp.err = (sum(prediction != testData$Class)/nrow(testData))
#temp.model = naiveBayes(as.factor(trainData$Class)~.,data=trainData)
#temp.predictions = predict(temp.model,testData[,-1])
#tmp.err = sum(temp.predictions!=testData[,1])/nrow(testData)
#print(table(predict(temp.model,testData[,-1]),testData[,1]))
print(tmp.err)
crossvalidationError = crossvalidationError+tmp.err
}
print(crossvalidationError)
calculateProb <- function(classData, dataPoint, classPriori){
# create covariance matrix of data
covariance = cov(classData)
# compute means of all the columns
mean = colMeans(classData)
# calculate probability
prob = (exp(-(as.matrix(dataPoint-mean))%*%solve(covariance)%*%(t(dataPoint-mean))))*classPriori/sqrt(det(covariance))
return(prob)
}
predict <- function(bandsWithClass, tData){
prediction = c()
# seperate out data based on class assignment
class1Data = bandsWithClass[bandsWithClass$Class == 1,][,-1]
class1Priori = nrow(class1Data)/nrow(bandsWithClass)
class2Data = bandsWithClass[bandsWithClass$Class == 2,][,-1]
class2Priori = nrow(class2Data)/nrow(bandsWithClass)
class3Data = bandsWithClass[bandsWithClass$Class == 3,][,-1]
class3Priori = nrow(class3Data)/nrow(bandsWithClass)
class4Data = bandsWithClass[bandsWithClass$Class == 4,][,-1]
class4Priori = nrow(class4Data)/nrow(bandsWithClass)
for (i in c(1:nrow(tData))){
# campute all class probabilities
class1Prob = calculateProb(class1Data, tData[i,], class1Priori)
#print(class1Prob)
class2Prob = calculateProb(class2Data, tData[i,], class2Priori)
#print(class2Prob)
class3Prob = calculateProb(class3Data, tData[i,], class3Priori)
#print(class3Prob)
class4Prob = calculateProb(class4Data, tData[i,], class4Priori)
#print("###class 4###")
#print(class4Prob)
finalClass = 1;
finalProb = class1Prob
if(class2Prob > finalProb){
finalClass = 2
finalProb = class2Prob
}
if(class3Prob > finalProb){
finalClass = 3
finalProb = class3Prob
}
if(class4Prob > finalProb){
finalClass = 4
finalProb = class4Prob
}
prediction = c(prediction, finalClass)
}
return(prediction)
}
library(MASS)
# set work directory as the location of the script
setwd("C:/Users/Sanket Shahane/Google Drive/MS/ALDA/Project/Multi-temporal-Classification-of-satellite-images/Rscripts")
dataset = read.csv("../TrainingData/Corrected Data/ValidationData-2015-04-19.csv")
dataset = dataset[,-c(1,2,3)]
# shuffle dataset for cross-validation
shuffleVec = sample(nrow(dataset),nrow(dataset))
dataset = dataset[shuffleVec,]
crossvalidationError = 0
k=10
for(i in seq(0,k-1,1)){
testVector = seq(1,nrow(dataset)%/%k)
testVector = testVector + nrow(dataset)%/%k*i
testData = dataset[testVector,]
trainData = dataset[-testVector,]
prediction = predict(trainData, testData[,-1])
temp.err = (sum(prediction != testData$Class)/nrow(testData))
#temp.model = naiveBayes(as.factor(trainData$Class)~.,data=trainData)
#temp.predictions = predict(temp.model,testData[,-1])
#tmp.err = sum(temp.predictions!=testData[,1])/nrow(testData)
#print(table(predict(temp.model,testData[,-1]),testData[,1]))
print(temp.err)
crossvalidationError = crossvalidationError+temp.err
}
print(crossvalidationError)
calculateProb <- function(classData, dataPoint, classPriori){
# create covariance matrix of data
covariance = cov(classData)
# compute means of all the columns
mean = colMeans(classData)
# calculate probability
prob = (exp(-(as.matrix(dataPoint-mean))%*%solve(covariance)%*%(t(dataPoint-mean))))*classPriori/sqrt(det(covariance))
return(prob)
}
predict <- function(bandsWithClass, tData){
prediction = c()
# seperate out data based on class assignment
class1Data = bandsWithClass[bandsWithClass$Class == 1,][,-1]
class1Priori = nrow(class1Data)/nrow(bandsWithClass)
class2Data = bandsWithClass[bandsWithClass$Class == 2,][,-1]
class2Priori = nrow(class2Data)/nrow(bandsWithClass)
class3Data = bandsWithClass[bandsWithClass$Class == 3,][,-1]
class3Priori = nrow(class3Data)/nrow(bandsWithClass)
class4Data = bandsWithClass[bandsWithClass$Class == 4,][,-1]
class4Priori = nrow(class4Data)/nrow(bandsWithClass)
for (i in c(1:nrow(tData))){
# campute all class probabilities
class1Prob = calculateProb(class1Data, tData[i,], class1Priori)
#print(class1Prob)
class2Prob = calculateProb(class2Data, tData[i,], class2Priori)
#print(class2Prob)
class3Prob = calculateProb(class3Data, tData[i,], class3Priori)
#print(class3Prob)
class4Prob = calculateProb(class4Data, tData[i,], class4Priori)
#print("###class 4###")
#print(class4Prob)
finalClass = 1;
finalProb = class1Prob
if(class2Prob > finalProb){
finalClass = 2
finalProb = class2Prob
}
if(class3Prob > finalProb){
finalClass = 3
finalProb = class3Prob
}
if(class4Prob > finalProb){
finalClass = 4
finalProb = class4Prob
}
prediction = c(prediction, finalClass)
}
return(prediction)
}
library(MASS)
# set work directory as the location of the script
setwd("C:/Users/Sanket Shahane/Google Drive/MS/ALDA/Project/Multi-temporal-Classification-of-satellite-images/Rscripts")
dataset = read.csv("../TrainingData/Corrected Data/ValidationData-2015-04-19.csv")
dataset = dataset[,-c(1,2,3)]
# shuffle dataset for cross-validation
shuffleVec = sample(nrow(dataset),nrow(dataset))
dataset = dataset[shuffleVec,]
crossvalidationError = 0
k=10
for(i in seq(0,k-1,1)){
testVector = seq(1,nrow(dataset)%/%k)
testVector = testVector + nrow(dataset)%/%k*i
testData = dataset[testVector,]
trainData = dataset[-testVector,]
prediction = predict(trainData, testData[,-1])
temp.err = (sum(prediction != testData$Class)/nrow(testData))
#temp.model = naiveBayes(as.factor(trainData$Class)~.,data=trainData)
#temp.predictions = predict(temp.model,testData[,-1])
#tmp.err = sum(temp.predictions!=testData[,1])/nrow(testData)
#print(table(predict(temp.model,testData[,-1]),testData[,1]))
print(temp.err)
crossvalidationError = crossvalidationError+temp.err
}
print(crossvalidationError/10)
